1) Написать ответ - почему массивы в JS являются "неправильными" и совмещают в себе несколько структур данных? Какие?

Массивы в JavaScript иногда называют "неправильными" структурами данных из-за особых свойств и особенностей, которые могут быть неожиданными и могут вызывать путаницу.

Одно из таких свойств - это то, что при добавлении элемента в массив, нужно создать новый массив длиннее старого на 1 элемент, затем скопировать в него все значения старого массива и в качестве последнего элемента указать новое значение.

Еще одной особенностью массивов в JavaScript является их возможность иметь разреженные индексы. Это означает, что некоторые индексы в массиве могут быть "пропущенными", то есть не содержать элементов. Например, если у нас есть массив с 5 элементами, то мы можем обращаться к элементам с индексами от 0 до 4. Однако мы также можем обратиться к элементу с индексом 10, и это не вызовет ошибки, но вернет значение undefined.

Также массивы в JavaScript не имеют строгой типизации, что означает, что не существует ограничений на типы данных, которые могут быть хранены в массиве.

Так же массивы в JavaScript совмещают в себе несколько структур данных и могут быть использованы как стеки, очереди и хеш-таблицы. Методы массива, соответствуют операциями стека и очереди.

2) Привязать контекст объекта к функции logger, чтобы при вызове this.item выводило - some value (Привязать через bind, call, apply)


function logger() {
    console.log(`I output only external context: ${this.item}`);
}

const obj = { item: "some value" };

logger.bind(obj)()
logger.call(obj)
logger.apply(obj)

Бонус задание: Реализовать полифил(собственную функцию реализующую встроенную в js) метода bind()

const obj = {
  item: "some value"
}

function logger() {
  console.log(`I output only external context: ${this.item}`)
}

function myBind(fn, context){
  return function(){
    const uniqId = Date.now().toString()

    context[uniqId] = fn

    const result = context[uniqId]()

    delete context[uniqId]

    return result
  }
}

myBind(logger,obj)()